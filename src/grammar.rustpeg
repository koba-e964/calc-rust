use ast::*;

#[pub]
top_exp -> (Vec<FunDec>, AST)
        = space* f:fundec_space* e:exp space* { (f, e) }
fundec_space -> FunDec
        = f:fundec space* { f }
fundec -> FunDec
        = "def" space+ f:ident space*
          "(" space* params:params space* ")" space* ":" space* ret_ty:type space*
          "{" space* e:exp space* "}" { {let mut t = params; t.reverse(); (f, t, ret_ty, e)} }
params -> Vec<(String, Type)>
        = x:ident space* ":" space* ty:type space* "," space* params:params
          { {let mut t = params; t.push((x, ty)); t} }
        / x:ident space* ":" space* ty:type { vec![(x, ty)] }
exp -> AST
	= letex
        / add_ast
letex -> AST
        = "let" space+ x:ident space* "=" space* e1:exp space+ "in" space+ e2:exp
           { AST::LetEx(x, Box::new(e1), Box::new(e2)) }
add_ast -> AST
        = e:sum { super::vecast_to_ast(e, |op, l, r| AST::OpNode(op, Box::new(l), Box::new(r))) }
sum -> (Vec<(AST, Op)>, AST)
	= l:mul_ast space* op:addop space* r:sum { {let (mut x, y) = r; x.push((l, op)); (x, y)} }
	/ e:mul_ast { (Vec::new(), e) }
addop -> Op
        = "+" { Op::Add }
        / "-" { Op::Sub }
mul_ast -> AST
        = e:product { super::vecast_to_ast(e, |op, l, r| AST::OpNode(op, Box::new(l), Box::new(r))) }
product -> (Vec<(AST, Op)>, AST)
	= l:atom space* op:mulop space* r:product { {let (mut x, y) = r; x.push((l, op)); (x, y)} }
	/ e:atom { (Vec::new(), e) }
mulop -> Op
        = "*" { Op::Mul }
        / "/" { Op::Div }
atom -> AST
	= number
        / str
	/ "if" space* cond:exp space* "then" space* e1:exp space*
	"else" space* e2:exp space* "end"
	{ AST::IfNode(Box::new(cond), Box::new(e1), Box::new(e2)) }
	/ v:ident space* "(" space* e:args space* ")"
           { {let mut t = e; t.reverse(); AST::FunApp(v, t)} }
        / v:ident { AST::Var(v) }
	/ "(" space* v:exp space* ")" { v }
number -> AST
	= mstr:$([0-9]+) { AST::Num(mstr.parse().unwrap()) }
args -> Vec<AST>
        = e:exp space* "," space* a:args { {let mut t = a; t.push(e); t} }
        / e:exp { vec![e] }
str -> AST
        = "\"" s:str_internal "\"" { AST::Str(s) }
str_internal -> String
        = mstr:$([^\"]*) { mstr.to_string() }
space -> ()
        = " " / "\n" / "\r"
ident -> String
        = !keyword mstr:$([a-zA-Z]+) { mstr.to_string() }
type -> Type
        = "int" { Type::Int }
	/ "str" { Type::Str }
keyword -> () = "def" / "let" / "in" / "if" / "then" / "else"